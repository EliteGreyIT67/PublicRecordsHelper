// PDF Generation functionality using jsPDF
function generatePDF(letterText, formData) {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();
    
    // Set up document properties
    doc.setProperties({
        title: 'Public Records Request',
        subject: formData.subject || 'Public Records Request',
        author: formData.requesterName || 'Anonymous',
        creator: 'Public Records Request Generator'
    });
    
    // Set font and margins
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(12);
    
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const margin = 20;
    const maxWidth = pageWidth - (margin * 2);
    const lineHeight = 6;
    
    let currentY = margin;
    
    // Function to add text with word wrapping
    function addText(text, x, y, maxWidth, lineHeight) {
        const lines = doc.splitTextToSize(text, maxWidth);
        doc.text(lines, x, y);
        return y + (lines.length * lineHeight);
    }
    
    // Function to check if we need a new page
    function checkNewPage(requiredHeight) {
        if (currentY + requiredHeight > pageHeight - margin) {
            doc.addPage();
            currentY = margin;
        }
    }
    
    // Parse and format the letter text
    const letterLines = letterText.split('\n');
    
    for (let i = 0; i < letterLines.length; i++) {
        const line = letterLines[i];
        
        // Check for page break
        checkNewPage(lineHeight * 2);
        
        if (line.trim() === '') {
            // Empty line - add spacing
            currentY += lineHeight;
        } else if (line.startsWith('RE:')) {
            // Subject line - make it bold
            doc.setFont('helvetica', 'bold');
            currentY = addText(line, margin, currentY, maxWidth, lineHeight);
            doc.setFont('helvetica', 'normal');
            currentY += lineHeight * 0.5;
        } else if (line.includes('Dear ') || line.includes('To Whom It May Concern:')) {
            // Salutation
            currentY = addText(line, margin, currentY, maxWidth, lineHeight);
            currentY += lineHeight * 0.5;
        } else if (line.includes('Sincerely,') || line.includes('Thank you')) {
            // Closing
            currentY += lineHeight * 0.5;
            currentY = addText(line, margin, currentY, maxWidth, lineHeight);
            currentY += lineHeight * 0.5;
        } else if (line.match(/^\d{1,2}\/\d{1,2}\/\d{4}$/) || line.match(/^[A-Z][a-z]+ \d{1,2}, \d{4}$/)) {
            // Date - align right
            doc.text(line, pageWidth - margin - doc.getTextWidth(line), currentY);
            currentY += lineHeight * 2;
        } else {
            // Regular text
            currentY = addText(line, margin, currentY, maxWidth, lineHeight);
            currentY += lineHeight * 0.2;
        }
    }
    
    // Add footer with generation info
    const footerY = pageHeight - 10;
    doc.setFontSize(8);
    doc.setTextColor(128, 128, 128);
    doc.text('Generated by Public Records Request Generator', margin, footerY);
    doc.text(new Date().toLocaleDateString(), pageWidth - margin - doc.getTextWidth(new Date().toLocaleDateString()), footerY);
    
    // Generate filename
    const today = new Date().toISOString().split('T')[0];
    const agencyName = formData.agencyName ? formData.agencyName.replace(/[^a-zA-Z0-9]/g, '-') : 'agency';
    const filename = `public-records-request-${agencyName}-${today}.pdf`;
    
    // Save the PDF
    doc.save(filename);
}

// Alternative PDF generation with better formatting
function generateFormattedPDF(formData) {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();
    
    // Set up document
    doc.setFont('times', 'normal');
    const pageWidth = doc.internal.pageSize.getWidth();
    const margin = 20;
    const maxWidth = pageWidth - (margin * 2);
    let currentY = margin;
    
    // Helper function to add formatted text
    function addFormattedText(text, options = {}) {
        const fontSize = options.fontSize || 12;
        const fontStyle = options.fontStyle || 'normal';
        const align = options.align || 'left';
        const spacing = options.spacing || 1.5;
        
        doc.setFontSize(fontSize);
        doc.setFont('times', fontStyle);
        
        const lines = doc.splitTextToSize(text, maxWidth);
        
        for (let i = 0; i < lines.length; i++) {
            let x = margin;
            if (align === 'center') {
                x = (pageWidth - doc.getTextWidth(lines[i])) / 2;
            } else if (align === 'right') {
                x = pageWidth - margin - doc.getTextWidth(lines[i]);
            }
            
            doc.text(lines[i], x, currentY);
            currentY += fontSize * spacing * 0.352778; // Convert to mm
        }
        
        return currentY;
    }
    
    // Add letterhead space
    currentY += 20;
    
    // Date (right-aligned)
    const today = new Date().toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
    
    addFormattedText(today, { align: 'right' });
    currentY += 20;
    
    // Agency address
    if (formData.agencyContact) {
        addFormattedText(formData.agencyContact);
        currentY += 5;
    }
    if (formData.agencyName) {
        addFormattedText(formData.agencyName);
        currentY += 5;
    }
    if (formData.agencyDepartment) {
        addFormattedText(formData.agencyDepartment);
        currentY += 5;
    }
    if (formData.agencyAddress) {
        const addressLines = formData.agencyAddress.split('\n');
        addressLines.forEach(line => {
            if (line.trim()) {
                addFormattedText(line.trim());
                currentY += 5;
            }
        });
    }
    
    currentY += 15;
    
    // Subject line
    addFormattedText(`RE: ${formData.subject || 'Public Records Request'}`, { fontStyle: 'bold' });
    currentY += 15;
    
    // Salutation
    const salutation = formData.agencyContact ? `Dear ${formData.agencyContact},` : 'To Whom It May Concern:';
    addFormattedText(salutation);
    currentY += 15;
    
    // Body paragraphs
    const bodyText = generateLetterBody(formData);
    addFormattedText(bodyText, { spacing: 1.2 });
    currentY += 15;
    
    // Closing
    addFormattedText('Thank you for your time and consideration.');
    currentY += 15;
    
    addFormattedText('Sincerely,');
    currentY += 30; // Space for signature
    
    // Signature block
    addFormattedText(formData.requesterName || 'Your Name');
    currentY += 5;
    
    if (formData.requesterOrganization) {
        addFormattedText(formData.requesterOrganization);
        currentY += 5;
    }
    
    if (formData.requesterAddress) {
        const addressLines = formData.requesterAddress.split('\n');
        addressLines.forEach(line => {
            if (line.trim()) {
                addFormattedText(line.trim());
                currentY += 5;
            }
        });
    }
    
    addFormattedText(formData.requesterEmail || 'your-email@example.com');
    currentY += 5;
    
    if (formData.requesterPhone) {
        addFormattedText(formData.requesterPhone);
    }
    
    // Save the document
    const filename = generatePDFFilename(formData);
    doc.save(filename);
}

// Generate letter body text
function generateLetterBody(formData) {
    let body = '';
    
    // Get state info for citation
    const stateInfo = getStateInfo(formData.state);
    const citation = stateInfo ? stateInfo.citation : 'applicable state public records laws';
    
    // Opening paragraph
    body += `I am writing to request access to public records under ${citation}. `;
    if (formData.requesterOrganization) {
        body += `I am making this request on behalf of ${formData.requesterOrganization}. `;
    }
    body += '\n\n';
    
    // Records description
    body += 'Specifically, I am requesting:\n\n';
    body += `${formData.recordsDescription || 'Please describe the records you are requesting...'}\n\n`;
    
    // Date range
    if (formData.dateFrom || formData.dateTo) {
        body += 'Date Range: ';
        if (formData.dateFrom && formData.dateTo) {
            body += `${formatDateForLetter(formData.dateFrom)} to ${formatDateForLetter(formData.dateTo)}`;
        } else if (formData.dateFrom) {
            body += `From ${formatDateForLetter(formData.dateFrom)}`;
        } else if (formData.dateTo) {
            body += `Through ${formatDateForLetter(formData.dateTo)}`;
        }
        body += '\n\n';
    }
    
    // Format preference
    if (formData.preferredFormat) {
        const formatText = getFormatPreferenceText(formData.preferredFormat);
        body += `I would prefer to receive these records in ${formatText} format.\n\n`;
    }
    
    // Fee waiver
    if (formData.feeWaiverRequest) {
        body += 'I request that any fees associated with this request be waived as this information is being sought in the public interest and will contribute to public understanding of government operations.\n\n';
    }
    
    // Expedited processing
    if (formData.expeditedProcessing) {
        body += 'I request expedited processing of this request due to its time-sensitive nature.\n\n';
    }
    
    // Additional notes
    if (formData.additionalNotes) {
        body += `${formData.additionalNotes}\n\n`;
    }
    
    // Legal requirements
    body += getLegalRequirementsText(formData.state) + '\n\n';
    
    // Contact information
    body += `If you have any questions about this request, please contact me at ${formData.requesterEmail || 'your-email@example.com'}`;
    if (formData.requesterPhone) {
        body += ` or ${formData.requesterPhone}`;
    }
    body += '.\n\n';
    
    return body;
}

// Helper functions
function getStateInfo(stateCode) {
    // This would normally fetch from the states data
    // For now, return a default
    return {
        citation: 'applicable state public records laws',
        responseTime: 'the time required by law'
    };
}

function formatDateForLetter(dateString) {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
}

function getFormatPreferenceText(format) {
    switch (format) {
        case 'electronic': return 'electronic';
        case 'paper': return 'paper copy';
        case 'inspection': return 'inspection only';
        default: return 'electronic';
    }
}

function getLegalRequirementsText(stateCode) {
    const stateInfo = getStateInfo(stateCode);
    if (!stateInfo) {
        return 'Please respond to this request within the timeframe required by applicable law.';
    }
    
    return `Under applicable law, you are required to respond to this request within ${stateInfo.responseTime}. If there are any fees associated with this request, please provide a detailed breakdown of costs before proceeding. If any portion of this request is denied, please cite the specific legal authority for the denial and advise me of my appeal rights.`;
}

function generatePDFFilename(formData) {
    const today = new Date().toISOString().split('T')[0];
    const agencyName = formData.agencyName ? 
        formData.agencyName.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase() : 
        'agency';
    return `public-records-request-${agencyName}-${today}.pdf`;
}
